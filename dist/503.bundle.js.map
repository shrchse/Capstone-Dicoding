{"version":3,"file":"503.bundle.js","mappings":"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","sources":["webpack://capstone/./node_modules/firebase/app/dist/index.esm.js","webpack://capstone/./node_modules/@firebase/app/dist/esm/index.esm2017.js","webpack://capstone/./node_modules/@firebase/component/dist/esm/index.esm2017.js","webpack://capstone/./node_modules/@firebase/logger/dist/esm/index.esm2017.js"],"sourcesContent":["import { registerVersion } from '@firebase/app';\r\nexport * from '@firebase/app';\r\n\r\nvar name = \"firebase\";\r\nvar version = \"9.14.0\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterVersion(name, version, 'app');\r\n//# sourceMappingURL=index.esm.js.map\r\n","import { Component, ComponentContainer } from '@firebase/component';\r\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\r\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\r\nexport { FirebaseError } from '@firebase/util';\r\nimport { openDB } from 'idb';\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\r\n\r\nconst name$o = \"@firebase/app\";\r\nconst version$1 = \"0.8.4\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\r\n\r\nconst name$n = \"@firebase/app-compat\";\r\n\r\nconst name$m = \"@firebase/analytics-compat\";\r\n\r\nconst name$l = \"@firebase/analytics\";\r\n\r\nconst name$k = \"@firebase/app-check-compat\";\r\n\r\nconst name$j = \"@firebase/app-check\";\r\n\r\nconst name$i = \"@firebase/auth\";\r\n\r\nconst name$h = \"@firebase/auth-compat\";\r\n\r\nconst name$g = \"@firebase/database\";\r\n\r\nconst name$f = \"@firebase/database-compat\";\r\n\r\nconst name$e = \"@firebase/functions\";\r\n\r\nconst name$d = \"@firebase/functions-compat\";\r\n\r\nconst name$c = \"@firebase/installations\";\r\n\r\nconst name$b = \"@firebase/installations-compat\";\r\n\r\nconst name$a = \"@firebase/messaging\";\r\n\r\nconst name$9 = \"@firebase/messaging-compat\";\r\n\r\nconst name$8 = \"@firebase/performance\";\r\n\r\nconst name$7 = \"@firebase/performance-compat\";\r\n\r\nconst name$6 = \"@firebase/remote-config\";\r\n\r\nconst name$5 = \"@firebase/remote-config-compat\";\r\n\r\nconst name$4 = \"@firebase/storage\";\r\n\r\nconst name$3 = \"@firebase/storage-compat\";\r\n\r\nconst name$2 = \"@firebase/firestore\";\r\n\r\nconst name$1 = \"@firebase/firestore-compat\";\r\n\r\nconst name = \"firebase\";\r\nconst version = \"9.14.0\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"no-options\" /* NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"idb-open\" /* IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-get\" /* IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-set\" /* IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\r\n    [\"idb-delete\" /* IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(_options, rawConfig = {}) {\r\n    let options = _options;\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    options || (options = getDefaultAppConfig());\r\n    if (!options) {\r\n        throw ERROR_FACTORY.create(\"no-options\" /* NO_OPTIONS */);\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app && name === DEFAULT_ENTRY_NAME) {\r\n        return initializeApp();\r\n    }\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDB(DB_NAME, DB_VERSION, {\r\n            upgrade: (db, oldVersion) => {\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(STORE_NAME);\r\n                }\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"idb-open\" /* IDB_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-get\" /* IDB_GET */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    var _a;\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.done;\r\n    }\r\n    catch (e) {\r\n        if (e instanceof FirebaseError) {\r\n            logger.warn(e.message);\r\n        }\r\n        else {\r\n            const idbGetError = ERROR_FACTORY.create(\"idb-set\" /* IDB_WRITE */, {\r\n                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\r\n            });\r\n            logger.warn(idbGetError.message);\r\n        }\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const agent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        // Do not store a heartbeat if one is already stored for this day\r\n        // or if a header has already been sent today.\r\n        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||\r\n            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.heartbeats.push({ date, agent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null or the array is empty, there is no data to send.\r\n        if (this._heartbeatsCache === null ||\r\n            this._heartbeatsCache.heartbeats.length === 0) {\r\n            return '';\r\n        }\r\n        const date = getUTCDateString();\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);\r\n        const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        // Store last sent date to prevent another being logged/sent for the same day.\r\n        this._heartbeatsCache.lastSentHeartbeatDate = date;\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache.heartbeats = unsentEntries;\r\n            // This seems more likely than emptying the array (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache.heartbeats = [];\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                agent: singleDateHeartbeat.agent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return { heartbeats: [] };\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return idbHeartbeatObject || { heartbeats: [] };\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: heartbeatsObject.heartbeats\r\n            });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeatsObject) {\r\n        var _a;\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeatsObject = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\r\n                heartbeats: [\r\n                    ...existingHeartbeatsObject.heartbeats,\r\n                    ...heartbeatsObject.heartbeats\r\n                ]\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64urlEncodeWithoutPadding(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\r\n\r\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\r\n\r\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\r\n//# sourceMappingURL=index.esm2017.js.map\r\n","import { Deferred } from '@firebase/util';\r\n\r\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass Component {\r\n    /**\r\n     *\r\n     * @param name The public service name, e.g. app, auth, firestore, database\r\n     * @param instanceFactory Service factory responsible for creating the public interface\r\n     * @param type whether the service provided by the component is public or private\r\n     */\r\n    constructor(name, instanceFactory, type) {\r\n        this.name = name;\r\n        this.instanceFactory = instanceFactory;\r\n        this.type = type;\r\n        this.multipleInstances = false;\r\n        /**\r\n         * Properties to be added to the service namespace\r\n         */\r\n        this.serviceProps = {};\r\n        this.instantiationMode = \"LAZY\" /* LAZY */;\r\n        this.onInstanceCreated = null;\r\n    }\r\n    setInstantiationMode(mode) {\r\n        this.instantiationMode = mode;\r\n        return this;\r\n    }\r\n    setMultipleInstances(multipleInstances) {\r\n        this.multipleInstances = multipleInstances;\r\n        return this;\r\n    }\r\n    setServiceProps(props) {\r\n        this.serviceProps = props;\r\n        return this;\r\n    }\r\n    setInstanceCreatedCallback(callback) {\r\n        this.onInstanceCreated = callback;\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\r\nclass Provider {\r\n    constructor(name, container) {\r\n        this.name = name;\r\n        this.container = container;\r\n        this.component = null;\r\n        this.instances = new Map();\r\n        this.instancesDeferred = new Map();\r\n        this.instancesOptions = new Map();\r\n        this.onInitCallbacks = new Map();\r\n    }\r\n    /**\r\n     * @param identifier A provider can provide mulitple instances of a service\r\n     * if this.component.multipleInstances is true.\r\n     */\r\n    get(identifier) {\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        if (!this.instancesDeferred.has(normalizedIdentifier)) {\r\n            const deferred = new Deferred();\r\n            this.instancesDeferred.set(normalizedIdentifier, deferred);\r\n            if (this.isInitialized(normalizedIdentifier) ||\r\n                this.shouldAutoInitialize()) {\r\n                // initialize the service if it can be auto-initialized\r\n                try {\r\n                    const instance = this.getOrInitializeService({\r\n                        instanceIdentifier: normalizedIdentifier\r\n                    });\r\n                    if (instance) {\r\n                        deferred.resolve(instance);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // when the instance factory throws an exception during get(), it should not cause\r\n                    // a fatal error. We just return the unresolved promise in this case.\r\n                }\r\n            }\r\n        }\r\n        return this.instancesDeferred.get(normalizedIdentifier).promise;\r\n    }\r\n    getImmediate(options) {\r\n        var _a;\r\n        // if multipleInstances is not supported, use the default name\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\r\n        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\r\n        if (this.isInitialized(normalizedIdentifier) ||\r\n            this.shouldAutoInitialize()) {\r\n            try {\r\n                return this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n            }\r\n            catch (e) {\r\n                if (optional) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\r\n            if (optional) {\r\n                return null;\r\n            }\r\n            else {\r\n                throw Error(`Service ${this.name} is not available`);\r\n            }\r\n        }\r\n    }\r\n    getComponent() {\r\n        return this.component;\r\n    }\r\n    setComponent(component) {\r\n        if (component.name !== this.name) {\r\n            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);\r\n        }\r\n        if (this.component) {\r\n            throw Error(`Component for ${this.name} has already been provided`);\r\n        }\r\n        this.component = component;\r\n        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\r\n        if (!this.shouldAutoInitialize()) {\r\n            return;\r\n        }\r\n        // if the service is eager, initialize the default instance\r\n        if (isComponentEager(component)) {\r\n            try {\r\n                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\r\n            }\r\n            catch (e) {\r\n                // when the instance factory for an eager Component throws an exception during the eager\r\n                // initialization, it should not cause a fatal error.\r\n                // TODO: Investigate if we need to make it configurable, because some component may want to cause\r\n                // a fatal error in this case?\r\n            }\r\n        }\r\n        // Create service instances for the pending promises and resolve them\r\n        // NOTE: if this.multipleInstances is false, only the default instance will be created\r\n        // and all promises with resolve with it regardless of the identifier.\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            try {\r\n                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\r\n                const instance = this.getOrInitializeService({\r\n                    instanceIdentifier: normalizedIdentifier\r\n                });\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n            catch (e) {\r\n                // when the instance factory throws an exception, it should not cause\r\n                // a fatal error. We just leave the promise unresolved.\r\n            }\r\n        }\r\n    }\r\n    clearInstance(identifier = DEFAULT_ENTRY_NAME) {\r\n        this.instancesDeferred.delete(identifier);\r\n        this.instancesOptions.delete(identifier);\r\n        this.instances.delete(identifier);\r\n    }\r\n    // app.delete() will call this method on every provider to delete the services\r\n    // TODO: should we mark the provider as deleted?\r\n    async delete() {\r\n        const services = Array.from(this.instances.values());\r\n        await Promise.all([\r\n            ...services\r\n                .filter(service => 'INTERNAL' in service) // legacy services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service.INTERNAL.delete()),\r\n            ...services\r\n                .filter(service => '_delete' in service) // modularized services\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                .map(service => service._delete())\r\n        ]);\r\n    }\r\n    isComponentSet() {\r\n        return this.component != null;\r\n    }\r\n    isInitialized(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instances.has(identifier);\r\n    }\r\n    getOptions(identifier = DEFAULT_ENTRY_NAME) {\r\n        return this.instancesOptions.get(identifier) || {};\r\n    }\r\n    initialize(opts = {}) {\r\n        const { options = {} } = opts;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\r\n        if (this.isInitialized(normalizedIdentifier)) {\r\n            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);\r\n        }\r\n        if (!this.isComponentSet()) {\r\n            throw Error(`Component ${this.name} has not been registered yet`);\r\n        }\r\n        const instance = this.getOrInitializeService({\r\n            instanceIdentifier: normalizedIdentifier,\r\n            options\r\n        });\r\n        // resolve any pending promise waiting for the service instance\r\n        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {\r\n            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\r\n            if (normalizedIdentifier === normalizedDeferredIdentifier) {\r\n                instanceDeferred.resolve(instance);\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n    /**\r\n     *\r\n     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n     *\r\n     * @param identifier An optional instance identifier\r\n     * @returns a function to unregister the callback\r\n     */\r\n    onInit(callback, identifier) {\r\n        var _a;\r\n        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\r\n        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\r\n        existingCallbacks.add(callback);\r\n        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\r\n        const existingInstance = this.instances.get(normalizedIdentifier);\r\n        if (existingInstance) {\r\n            callback(existingInstance, normalizedIdentifier);\r\n        }\r\n        return () => {\r\n            existingCallbacks.delete(callback);\r\n        };\r\n    }\r\n    /**\r\n     * Invoke onInit callbacks synchronously\r\n     * @param instance the service instance`\r\n     */\r\n    invokeOnInitCallbacks(instance, identifier) {\r\n        const callbacks = this.onInitCallbacks.get(identifier);\r\n        if (!callbacks) {\r\n            return;\r\n        }\r\n        for (const callback of callbacks) {\r\n            try {\r\n                callback(instance, identifier);\r\n            }\r\n            catch (_a) {\r\n                // ignore errors in the onInit callback\r\n            }\r\n        }\r\n    }\r\n    getOrInitializeService({ instanceIdentifier, options = {} }) {\r\n        let instance = this.instances.get(instanceIdentifier);\r\n        if (!instance && this.component) {\r\n            instance = this.component.instanceFactory(this.container, {\r\n                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\r\n                options\r\n            });\r\n            this.instances.set(instanceIdentifier, instance);\r\n            this.instancesOptions.set(instanceIdentifier, options);\r\n            /**\r\n             * Invoke onInit listeners.\r\n             * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n             * while onInit listeners are registered by consumers of the provider.\r\n             */\r\n            this.invokeOnInitCallbacks(instance, instanceIdentifier);\r\n            /**\r\n             * Order is important\r\n             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n             * makes `isInitialized()` return true.\r\n             */\r\n            if (this.component.onInstanceCreated) {\r\n                try {\r\n                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\r\n                }\r\n                catch (_a) {\r\n                    // ignore errors in the onInstanceCreatedCallback\r\n                }\r\n            }\r\n        }\r\n        return instance || null;\r\n    }\r\n    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {\r\n        if (this.component) {\r\n            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\r\n        }\r\n        else {\r\n            return identifier; // assume multiple instances are supported before the component is provided.\r\n        }\r\n    }\r\n    shouldAutoInitialize() {\r\n        return (!!this.component &&\r\n            this.component.instantiationMode !== \"EXPLICIT\" /* EXPLICIT */);\r\n    }\r\n}\r\n// undefined should be passed to the service factory for the default instance\r\nfunction normalizeIdentifierForFactory(identifier) {\r\n    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\r\n}\r\nfunction isComponentEager(component) {\r\n    return component.instantiationMode === \"EAGER\" /* EAGER */;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\r\nclass ComponentContainer {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.providers = new Map();\r\n    }\r\n    /**\r\n     *\r\n     * @param component Component being added\r\n     * @param overwrite When a component with the same name has already been registered,\r\n     * if overwrite is true: overwrite the existing component with the new component and create a new\r\n     * provider with the new component. It can be useful in tests where you want to use different mocks\r\n     * for different tests.\r\n     * if overwrite is false: throw an exception\r\n     */\r\n    addComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);\r\n        }\r\n        provider.setComponent(component);\r\n    }\r\n    addOrOverwriteComponent(component) {\r\n        const provider = this.getProvider(component.name);\r\n        if (provider.isComponentSet()) {\r\n            // delete the existing provider from the container, so we can register the new component\r\n            this.providers.delete(component.name);\r\n        }\r\n        this.addComponent(component);\r\n    }\r\n    /**\r\n     * getProvider provides a type safe interface where it can only be called with a field name\r\n     * present in NameServiceMapping interface.\r\n     *\r\n     * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n     * themselves.\r\n     */\r\n    getProvider(name) {\r\n        if (this.providers.has(name)) {\r\n            return this.providers.get(name);\r\n        }\r\n        // create a Provider for a service that hasn't registered with Firebase\r\n        const provider = new Provider(name, this);\r\n        this.providers.set(name, provider);\r\n        return provider;\r\n    }\r\n    getProviders() {\r\n        return Array.from(this.providers.values());\r\n    }\r\n}\r\n\r\nexport { Component, ComponentContainer, Provider };\r\n//# sourceMappingURL=index.esm2017.js.map\r\n","/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nconst instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\nconst levelStringToEnum = {\r\n    'debug': LogLevel.DEBUG,\r\n    'verbose': LogLevel.VERBOSE,\r\n    'info': LogLevel.INFO,\r\n    'warn': LogLevel.WARN,\r\n    'error': LogLevel.ERROR,\r\n    'silent': LogLevel.SILENT\r\n};\r\n/**\r\n * The default log level\r\n */\r\nconst defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\r\nconst ConsoleMethod = {\r\n    [LogLevel.DEBUG]: 'log',\r\n    [LogLevel.VERBOSE]: 'log',\r\n    [LogLevel.INFO]: 'info',\r\n    [LogLevel.WARN]: 'warn',\r\n    [LogLevel.ERROR]: 'error'\r\n};\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nconst defaultLogHandler = (instance, logType, ...args) => {\r\n    if (logType < instance.logLevel) {\r\n        return;\r\n    }\r\n    const now = new Date().toISOString();\r\n    const method = ConsoleMethod[logType];\r\n    if (method) {\r\n        console[method](`[${now}]  ${instance.name}:`, ...args);\r\n    }\r\n    else {\r\n        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\r\n    }\r\n};\r\nclass Logger {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The main (internal) log handler for the Logger instance.\r\n         * Can be set to a new function in internal package code but not by user.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * The optional, additional, user-defined log handler for the Logger instance.\r\n         */\r\n        this._userLogHandler = null;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    get logLevel() {\r\n        return this._logLevel;\r\n    }\r\n    set logLevel(val) {\r\n        if (!(val in LogLevel)) {\r\n            throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\r\n        }\r\n        this._logLevel = val;\r\n    }\r\n    // Workaround for setter/getter having to be the same type.\r\n    setLogLevel(val) {\r\n        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\r\n    }\r\n    get logHandler() {\r\n        return this._logHandler;\r\n    }\r\n    set logHandler(val) {\r\n        if (typeof val !== 'function') {\r\n            throw new TypeError('Value assigned to `logHandler` must be a function');\r\n        }\r\n        this._logHandler = val;\r\n    }\r\n    get userLogHandler() {\r\n        return this._userLogHandler;\r\n    }\r\n    set userLogHandler(val) {\r\n        this._userLogHandler = val;\r\n    }\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    debug(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\r\n        this._logHandler(this, LogLevel.DEBUG, ...args);\r\n    }\r\n    log(...args) {\r\n        this._userLogHandler &&\r\n            this._userLogHandler(this, LogLevel.VERBOSE, ...args);\r\n        this._logHandler(this, LogLevel.VERBOSE, ...args);\r\n    }\r\n    info(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\r\n        this._logHandler(this, LogLevel.INFO, ...args);\r\n    }\r\n    warn(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\r\n        this._logHandler(this, LogLevel.WARN, ...args);\r\n    }\r\n    error(...args) {\r\n        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\r\n        this._logHandler(this, LogLevel.ERROR, ...args);\r\n    }\r\n}\r\nfunction setLogLevel(level) {\r\n    instances.forEach(inst => {\r\n        inst.setLogLevel(level);\r\n    });\r\n}\r\nfunction setUserLogHandler(logCallback, options) {\r\n    for (const instance of instances) {\r\n        let customLogLevel = null;\r\n        if (options && options.level) {\r\n            customLogLevel = levelStringToEnum[options.level];\r\n        }\r\n        if (logCallback === null) {\r\n            instance.userLogHandler = null;\r\n        }\r\n        else {\r\n            instance.userLogHandler = (instance, level, ...args) => {\r\n                const message = args\r\n                    .map(arg => {\r\n                    if (arg == null) {\r\n                        return null;\r\n                    }\r\n                    else if (typeof arg === 'string') {\r\n                        return arg;\r\n                    }\r\n                    else if (typeof arg === 'number' || typeof arg === 'boolean') {\r\n                        return arg.toString();\r\n                    }\r\n                    else if (arg instanceof Error) {\r\n                        return arg.message;\r\n                    }\r\n                    else {\r\n                        try {\r\n                            return JSON.stringify(arg);\r\n                        }\r\n                        catch (ignored) {\r\n                            return null;\r\n                        }\r\n                    }\r\n                })\r\n                    .filter(arg => arg)\r\n                    .join(' ');\r\n                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\r\n                    logCallback({\r\n                        level: LogLevel[level].toLowerCase(),\r\n                        message,\r\n                        args,\r\n                        type: instance.name\r\n                    });\r\n                }\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };\r\n//# sourceMappingURL=index.esm2017.js.map\r\n"],"names":["PlatformLoggerServiceImpl","constructor","container","this","getPlatformInfoString","getProviders","map","provider","component","getComponent","type","isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","name$o","version$1","logger","PLATFORM_LOG_STRING","_apps","Map","_components","_addComponent","app","addComponent","e","debug","name","_registerComponent","componentName","has","set","values","ERROR_FACTORY","FirebaseAppImpl","options","config","_isDeleted","_options","Object","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","val","isDeleted","create","appName","initializeApp","rawConfig","String","existingApp","get","newApp","registerVersion","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","push","warn","STORE_NAME","dbPromise","getDbPromise","upgrade","db","oldVersion","createObjectStore","catch","originalErrorMessage","message","async","writeHeartbeatsToIndexedDB","heartbeatObject","tx","transaction","objectStore","put","computeKey","done","idbGetError","appId","HeartbeatServiceImpl","_heartbeatsCache","getProvider","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","result","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","length","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","extractHeartbeatsForHeader","headerString","JSON","stringify","toISOString","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","Component","instanceFactory","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","identifier","normalizedIdentifier","normalizeInstanceIdentifier","deferred","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","promise","optional","Error","setComponent","isComponentEager","instanceDeferred","entries","clearInstance","delete","services","Array","from","Promise","all","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","undefined","ComponentContainer","providers","addOrOverwriteComponent","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","method","console","Logger","_logLevel","_logHandler","_userLogHandler","TypeError","setLogLevel","logHandler","userLogHandler","log","info","error"],"sourceRoot":""}